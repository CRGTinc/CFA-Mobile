/*
DeftJS 0.1.1

Copyright (c) 2012 [DeftJS Framework Contributors](http://deftjs.org)
Open source under the [MIT License](http://en.wikipedia.org/wiki/MIT_License).
*/
Ext.define("Deft.ioc.DependencyProvider",{config:{identifier:null,className:null,parameters:null,fn:null,value:null,singleton:!0,eager:!1},constructor:function(a){this.initConfig(a);a.value!=null&&a.value.constructor===Object&&this.setValue(a.value);this.getEager()&&(this.getValue()!=null&&Ext.Error.raise("Error while configuring '"+this.getIdentifier()+"': a 'value' cannot be created eagerly."),this.getSingleton()||Ext.Error.raise("Error while configuring '"+this.getIdentifier()+"': only singletons can be created eagerly."));
this.getSingleton()||this.getValue()!=null&&Ext.Error.raise("Error while configuring '"+this.getIdentifier()+"': a 'value' can only be configured as a singleton.");return this},resolve:function(a){var b;Ext.log("Resolving '"+this.getIdentifier()+"'.");if(this.getValue()!=null)return this.getValue();b=null;this.getFn()!=null?(Ext.log("Executing factory function."),b=this.fn(a)):this.getClassName()!=null?(Ext.log("Creating instance of '"+this.getClassName()+"'."),a=this.getParameters()!=null?[this.getClassName()].concat(this.getParameters()):
[this.getClassName()],b=Ext.create.apply(this,a)):Ext.Error.raise("Error while configuring rule for '"+this.getIdentifier()+"': no 'value', 'fn', or 'className' was specified.");this.getSingleton()&&this.setValue(b);return b}});
Ext.define("Deft.ioc.Injector",{alternateClassName:["Deft.Injector"],requires:["Deft.ioc.DependencyProvider"],singleton:!0,constructor:function(){this.providers={};return this},configure:function(a){Ext.log("Configuring injector.");Ext.Object.each(a,function(a,c){var d;Ext.log("Configuring dependency provider for '"+a+"'.");d=Ext.isString(c)?Ext.create("Deft.ioc.DependencyProvider",{identifier:a,className:c}):Ext.create("Deft.ioc.DependencyProvider",Ext.apply({identifier:a},c));this.providers[a]=
d},this);Ext.Object.each(this.providers,function(a,c){c.getEager()&&(Ext.log("Eagerly creating '"+c.getIdentifier()+"'."),c.resolve())},this)},canResolve:function(a){return this.providers[a]!=null},resolve:function(a,b){var c;c=this.providers[a];return c!=null?c.resolve(b):Ext.Error.raise("Error while resolving value to inject: no dependency provider found for '"+a+"'.")},inject:function(a,b){var c,d,h,i;c={};Ext.isString(a)&&(a=[a]);Ext.Object.each(a,function(d,f){var g,e;e=Ext.isArray(a)?f:d;g=
this.resolve(f,b);b.config.hasOwnProperty(e)?(Ext.log("Injecting '"+f+"' into 'config."+e+"'."),c[e]=g):(Ext.log("Injecting '"+f+"' into '"+e+"'."),b[e]=g)},this);if(b.$configInited)for(d in c)i=c[d],h="set"+Ext.String.capitalize(d),b[h].call(b,i);else b.config=Ext.Object.merge({},b.config||{},c);return b}});
Ext.define("Deft.mixin.Injectable",{requires:["Deft.ioc.Injector"],onClassMixedIn:function(a){a.prototype.constructor=Ext.Function.createInterceptor(a.prototype.constructor,function(){return Deft.Injector.inject(this.inject,this)})}});
